// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frimessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_frimessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_frimessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_frimessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_frimessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_frimessage_2eproto;
class FRIContent;
struct FRIContentDefaultTypeInternal;
extern FRIContentDefaultTypeInternal _FRIContent_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::FRIContent* Arena::CreateMaybeMessage<::FRIContent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class FRIContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FRIContent) */ {
 public:
  inline FRIContent() : FRIContent(nullptr) {}
  ~FRIContent() override;
  explicit PROTOBUF_CONSTEXPR FRIContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FRIContent(const FRIContent& from);
  FRIContent(FRIContent&& from) noexcept
    : FRIContent() {
    *this = ::std::move(from);
  }

  inline FRIContent& operator=(const FRIContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline FRIContent& operator=(FRIContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FRIContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const FRIContent* internal_default_instance() {
    return reinterpret_cast<const FRIContent*>(
               &_FRIContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FRIContent& a, FRIContent& b) {
    a.Swap(&b);
  }
  inline void Swap(FRIContent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FRIContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FRIContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FRIContent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FRIContent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FRIContent& from) {
    FRIContent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FRIContent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FRIContent";
  }
  protected:
  explicit FRIContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnglesFieldNumber = 2,
    kExternalTorquesFieldNumber = 3,
    kMeasuredTorquesFieldNumber = 4,
    kNumberOfLinksFieldNumber = 1,
  };
  // repeated double angles = 2;
  int angles_size() const;
  private:
  int _internal_angles_size() const;
  public:
  void clear_angles();
  private:
  double _internal_angles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_angles() const;
  void _internal_add_angles(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_angles();
  public:
  double angles(int index) const;
  void set_angles(int index, double value);
  void add_angles(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      angles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_angles();

  // repeated double external_torques = 3;
  int external_torques_size() const;
  private:
  int _internal_external_torques_size() const;
  public:
  void clear_external_torques();
  private:
  double _internal_external_torques(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_external_torques() const;
  void _internal_add_external_torques(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_external_torques();
  public:
  double external_torques(int index) const;
  void set_external_torques(int index, double value);
  void add_external_torques(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      external_torques() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_external_torques();

  // repeated double measured_torques = 4;
  int measured_torques_size() const;
  private:
  int _internal_measured_torques_size() const;
  public:
  void clear_measured_torques();
  private:
  double _internal_measured_torques(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_measured_torques() const;
  void _internal_add_measured_torques(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_measured_torques();
  public:
  double measured_torques(int index) const;
  void set_measured_torques(int index, double value);
  void add_measured_torques(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      measured_torques() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_measured_torques();

  // uint32 number_of_links = 1;
  void clear_number_of_links();
  uint32_t number_of_links() const;
  void set_number_of_links(uint32_t value);
  private:
  uint32_t _internal_number_of_links() const;
  void _internal_set_number_of_links(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:FRIContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > angles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > external_torques_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > measured_torques_;
    uint32_t number_of_links_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_frimessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FRIContent

// uint32 number_of_links = 1;
inline void FRIContent::clear_number_of_links() {
  _impl_.number_of_links_ = 0u;
}
inline uint32_t FRIContent::_internal_number_of_links() const {
  return _impl_.number_of_links_;
}
inline uint32_t FRIContent::number_of_links() const {
  // @@protoc_insertion_point(field_get:FRIContent.number_of_links)
  return _internal_number_of_links();
}
inline void FRIContent::_internal_set_number_of_links(uint32_t value) {
  
  _impl_.number_of_links_ = value;
}
inline void FRIContent::set_number_of_links(uint32_t value) {
  _internal_set_number_of_links(value);
  // @@protoc_insertion_point(field_set:FRIContent.number_of_links)
}

// repeated double angles = 2;
inline int FRIContent::_internal_angles_size() const {
  return _impl_.angles_.size();
}
inline int FRIContent::angles_size() const {
  return _internal_angles_size();
}
inline void FRIContent::clear_angles() {
  _impl_.angles_.Clear();
}
inline double FRIContent::_internal_angles(int index) const {
  return _impl_.angles_.Get(index);
}
inline double FRIContent::angles(int index) const {
  // @@protoc_insertion_point(field_get:FRIContent.angles)
  return _internal_angles(index);
}
inline void FRIContent::set_angles(int index, double value) {
  _impl_.angles_.Set(index, value);
  // @@protoc_insertion_point(field_set:FRIContent.angles)
}
inline void FRIContent::_internal_add_angles(double value) {
  _impl_.angles_.Add(value);
}
inline void FRIContent::add_angles(double value) {
  _internal_add_angles(value);
  // @@protoc_insertion_point(field_add:FRIContent.angles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FRIContent::_internal_angles() const {
  return _impl_.angles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FRIContent::angles() const {
  // @@protoc_insertion_point(field_list:FRIContent.angles)
  return _internal_angles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FRIContent::_internal_mutable_angles() {
  return &_impl_.angles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FRIContent::mutable_angles() {
  // @@protoc_insertion_point(field_mutable_list:FRIContent.angles)
  return _internal_mutable_angles();
}

// repeated double external_torques = 3;
inline int FRIContent::_internal_external_torques_size() const {
  return _impl_.external_torques_.size();
}
inline int FRIContent::external_torques_size() const {
  return _internal_external_torques_size();
}
inline void FRIContent::clear_external_torques() {
  _impl_.external_torques_.Clear();
}
inline double FRIContent::_internal_external_torques(int index) const {
  return _impl_.external_torques_.Get(index);
}
inline double FRIContent::external_torques(int index) const {
  // @@protoc_insertion_point(field_get:FRIContent.external_torques)
  return _internal_external_torques(index);
}
inline void FRIContent::set_external_torques(int index, double value) {
  _impl_.external_torques_.Set(index, value);
  // @@protoc_insertion_point(field_set:FRIContent.external_torques)
}
inline void FRIContent::_internal_add_external_torques(double value) {
  _impl_.external_torques_.Add(value);
}
inline void FRIContent::add_external_torques(double value) {
  _internal_add_external_torques(value);
  // @@protoc_insertion_point(field_add:FRIContent.external_torques)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FRIContent::_internal_external_torques() const {
  return _impl_.external_torques_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FRIContent::external_torques() const {
  // @@protoc_insertion_point(field_list:FRIContent.external_torques)
  return _internal_external_torques();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FRIContent::_internal_mutable_external_torques() {
  return &_impl_.external_torques_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FRIContent::mutable_external_torques() {
  // @@protoc_insertion_point(field_mutable_list:FRIContent.external_torques)
  return _internal_mutable_external_torques();
}

// repeated double measured_torques = 4;
inline int FRIContent::_internal_measured_torques_size() const {
  return _impl_.measured_torques_.size();
}
inline int FRIContent::measured_torques_size() const {
  return _internal_measured_torques_size();
}
inline void FRIContent::clear_measured_torques() {
  _impl_.measured_torques_.Clear();
}
inline double FRIContent::_internal_measured_torques(int index) const {
  return _impl_.measured_torques_.Get(index);
}
inline double FRIContent::measured_torques(int index) const {
  // @@protoc_insertion_point(field_get:FRIContent.measured_torques)
  return _internal_measured_torques(index);
}
inline void FRIContent::set_measured_torques(int index, double value) {
  _impl_.measured_torques_.Set(index, value);
  // @@protoc_insertion_point(field_set:FRIContent.measured_torques)
}
inline void FRIContent::_internal_add_measured_torques(double value) {
  _impl_.measured_torques_.Add(value);
}
inline void FRIContent::add_measured_torques(double value) {
  _internal_add_measured_torques(value);
  // @@protoc_insertion_point(field_add:FRIContent.measured_torques)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FRIContent::_internal_measured_torques() const {
  return _impl_.measured_torques_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
FRIContent::measured_torques() const {
  // @@protoc_insertion_point(field_list:FRIContent.measured_torques)
  return _internal_measured_torques();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FRIContent::_internal_mutable_measured_torques() {
  return &_impl_.measured_torques_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
FRIContent::mutable_measured_torques() {
  // @@protoc_insertion_point(field_mutable_list:FRIContent.measured_torques)
  return _internal_mutable_measured_torques();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_frimessage_2eproto
