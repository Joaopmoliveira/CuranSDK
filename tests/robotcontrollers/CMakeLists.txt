add_executable(test_handguidance_algorithm test_handguidance_algorithm.cpp)

target_compile_definitions(test_handguidance_algorithm PRIVATE SK_VULKAN)
target_compile_definitions(test_handguidance_algorithm PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_handguidance_algorithm PUBLIC
utils
robotutils
renderable
)


add_executable(test_impedance_controller test_impedance_controller.cpp)

target_compile_definitions(test_impedance_controller PRIVATE SK_VULKAN)
target_compile_definitions(test_impedance_controller PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_impedance_controller PUBLIC
utils
robotutils
renderable
)

add_executable(test_print_robot_state test_print_robot_state.cpp)

target_compile_definitions(test_print_robot_state PRIVATE SK_VULKAN)
target_compile_definitions(test_print_robot_state PRIVATE NOMINMAX)
target_compile_definitions(test_print_robot_state PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_print_robot_state PUBLIC
utils
robotutils
${OPERATING_SYSTEM_REQUIRMENTS}
)

add_executable(test_wall_avoidance_algorithm test_wall_avoidance_algorithm.cpp)

target_compile_definitions(test_wall_avoidance_algorithm PRIVATE SK_VULKAN)
target_compile_definitions(test_wall_avoidance_algorithm PRIVATE NOMINMAX)
target_compile_definitions(test_wall_avoidance_algorithm PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_wall_avoidance_algorithm PUBLIC
utils
robotutils
renderable
)


add_executable(test_joint_velocity_control test_joint_velocity_control.cpp)

target_compile_definitions(test_joint_velocity_control PRIVATE SK_VULKAN)
target_compile_definitions(test_joint_velocity_control PRIVATE NOMINMAX)
target_compile_definitions(test_joint_velocity_control PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_joint_velocity_control PUBLIC
utils
robotutils
renderable
)

add_executable(visualize_filtered_velocity visualize_filtered_velocity.cpp)

target_compile_definitions(visualize_filtered_velocity PRIVATE SK_VULKAN)
target_compile_definitions(visualize_filtered_velocity PRIVATE NOMINMAX)
target_compile_definitions(visualize_filtered_velocity PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(visualize_filtered_velocity PUBLIC
utils
robotutils
renderable
)


add_executable(test_rhytmic_motion test_rhytmic_motion.cpp)

target_compile_definitions(test_rhytmic_motion PRIVATE SK_VULKAN)
target_compile_definitions(test_rhytmic_motion PRIVATE NOMINMAX)
target_compile_definitions(test_rhytmic_motion PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_rhytmic_motion PUBLIC
utils
robotutils
renderable
)

add_executable(stupid_filter_test stupid_filter_test.cpp)

target_compile_definitions(stupid_filter_test PRIVATE NOMINMAX)

target_link_libraries(stupid_filter_test PUBLIC
utils
robotutils
)


add_executable(test_internal_rbdl_logic test_internal_rbdl_logic.cpp)

target_compile_definitions(test_internal_rbdl_logic PRIVATE NOMINMAX)

target_link_libraries(test_internal_rbdl_logic PUBLIC
utils
robotutils
nlohmann_json 
nlohmann_json::nlohmann_json 
)

add_executable(eigen_decomposition_for_impedance_controller eigen_decomposition_for_impedance_controller.cpp)

target_compile_definitions(eigen_decomposition_for_impedance_controller PRIVATE NOMINMAX)
target_compile_definitions(eigen_decomposition_for_impedance_controller PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(eigen_decomposition_for_impedance_controller PUBLIC
utils
robotutils
)



add_executable(test_simulated_impedance_robot test_simulated_impedance_robot.cpp)

target_compile_definitions(test_simulated_impedance_robot PRIVATE NOMINMAX)
target_compile_definitions(test_simulated_impedance_robot PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_simulated_impedance_robot PUBLIC
utils
robotutils
renderable
)

add_executable(test_simulated_velocity_robot test_simulated_velocity_robot.cpp)

target_compile_definitions(test_simulated_velocity_robot PRIVATE NOMINMAX)
target_compile_definitions(test_simulated_velocity_robot PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_simulated_velocity_robot PUBLIC
utils
robotutils
renderable
)

add_executable(test_cartesian_velocity_controller test_cartesian_velocity_controller.cpp)

target_compile_definitions(test_cartesian_velocity_controller PRIVATE NOMINMAX)
target_compile_definitions(test_cartesian_velocity_controller PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_cartesian_velocity_controller PUBLIC
utils
robotutils
renderable
)

add_executable(test_simulated_limit_cycle test_simulated_limit_cycle.cpp)

target_compile_definitions(test_simulated_limit_cycle PRIVATE NOMINMAX)
target_compile_definitions(test_simulated_limit_cycle PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_simulated_limit_cycle PUBLIC
utils
robotutils
renderable
)


add_executable(test_limit_cycle_controller test_limit_cycle_controller.cpp)

target_compile_definitions(test_limit_cycle_controller PRIVATE NOMINMAX)
target_compile_definitions(test_limit_cycle_controller PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_limit_cycle_controller PUBLIC
utils
robotutils
renderable
)

add_executable(test_limit_cycle_with_gmr_control test_limit_cycle_with_gmr_control.cpp)

target_compile_definitions(test_limit_cycle_with_gmr_control PRIVATE NOMINMAX)
target_compile_definitions(test_limit_cycle_with_gmr_control PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_limit_cycle_with_gmr_control PUBLIC
utils
robotutils
renderable
gaussianmixture
)

add_executable(test_limit_cycle_controller_real test_limit_cycle_controller_real.cpp)

target_compile_definitions(test_limit_cycle_controller_real PRIVATE NOMINMAX)
target_compile_definitions(test_limit_cycle_controller_real PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_limit_cycle_controller_real PUBLIC
utils
robotutils
renderable
gaussianmixture
)

add_executable(test_validation_matlab_cpp_interop test_validation_matlab_cpp_interop.cpp)

target_compile_definitions(test_validation_matlab_cpp_interop PRIVATE NOMINMAX)
target_compile_definitions(test_validation_matlab_cpp_interop PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_validation_matlab_cpp_interop PUBLIC
utils
robotutils
)


add_executable(test_robot_controller_with_switch test_robot_controller_with_switch.cpp)

target_compile_definitions(test_robot_controller_with_switch PRIVATE NOMINMAX)
target_compile_definitions(test_robot_controller_with_switch PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_robot_controller_with_switch PUBLIC
utils
robotutils
renderable
)

add_executable(recorder_first_joint_only recorder_first_joint_only.cpp)

target_compile_definitions(recorder_first_joint_only PRIVATE SK_VULKAN)
target_compile_definitions(recorder_first_joint_only PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(recorder_first_joint_only PUBLIC
utils
robotutils
renderable
)

add_executable(test_filtering_filter_joint test_filtering_filter_joint.cpp)

target_compile_definitions(test_filtering_filter_joint PRIVATE SK_VULKAN)
target_compile_definitions(test_filtering_filter_joint PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_filtering_filter_joint PUBLIC
utils
robotutils
renderable
)

add_executable(test_filtering_all_joints test_filtering_all_joints.cpp)

target_compile_definitions(test_filtering_all_joints PRIVATE SK_VULKAN)
target_compile_definitions(test_filtering_all_joints PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_filtering_all_joints PUBLIC
utils
robotutils
renderable
)

add_executable(test_simulation_filtering_all_joints test_simulation_filtering_all_joints.cpp)

target_compile_definitions(test_simulation_filtering_all_joints PRIVATE SK_VULKAN)
target_compile_definitions(test_simulation_filtering_all_joints PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_simulation_filtering_all_joints PUBLIC
utils
robotutils
renderable
)


add_executable(test_inertia_reduction test_inertia_reduction.cpp)

target_compile_definitions(test_inertia_reduction PRIVATE SK_VULKAN)
target_compile_definitions(test_inertia_reduction PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_inertia_reduction PUBLIC
utils
robotutils
renderable
)

add_executable(test_inertia_increase test_inertia_increase.cpp)

target_compile_definitions(test_inertia_increase PRIVATE SK_VULKAN)
target_compile_definitions(test_inertia_increase PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_inertia_increase PUBLIC
utils
robotutils
renderable
)

add_executable(test_comparison_two_and_three_harmonics test_comparison_two_and_three_harmonics.cpp)

target_compile_definitions(test_comparison_two_and_three_harmonics PRIVATE SK_VULKAN)
target_compile_definitions(test_comparison_two_and_three_harmonics PRIVATE CURAN_COPIED_RESOURCE_PATH="${post_build_resource_path}")

target_link_libraries(test_comparison_two_and_three_harmonics PUBLIC
utils
robotutils
renderable
)